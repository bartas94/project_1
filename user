from datetime import datetime
import sqlite3

class User:

    def __init__(self,login,password,acc_created="",acc_active="",wrong_pass_counter = 0):
        self.login = login
        self.password = password
        self.acc_created = acc_created
        self.acc_active = acc_active
        self.wrong_pass_counter = wrong_pass_counter
        self.connDB = sqlite3.connect('stock.db')

    def create_account(self):
        cur = self.connDB.cursor()
        db_login_query = []
        for _ in cur.execute("SELECT LOGIN FROM users"):
            db_login_query.append("".join(_))

        if self.login not in db_login_query:
            self.acc_created = datetime.date(datetime.now())
            self.acc_active = 1
            cur.execute("INSERT INTO users(LOGIN,PASSWORD,ACC_CREATED,ACC_ACTIVE,COUNT_FAILED_LOGIN) "
                        "VALUES(?,?,?,?,?)",(self.login,self.password,self.acc_created,self.acc_active,self.wrong_pass_counter))
            self.connDB.commit()
            return 1
        else:
            return 0

    def logged_user_info(self):
        print(f"User: {self.login}, logged correctly!")

    def __incorrect_password(self):
        cur = self.connDB.cursor()

        for row_failed_login in cur.execute("SELECT COUNT_FAILED_LOGIN FROM users WHERE LOGIN = ?",[self.login]):
            self.wrong_pass_counter = int(row_failed_login[0]) + 1
        cur.execute('UPDATE users SET COUNT_FAILED_LOGIN = ? WHERE LOGIN = ?', (self.wrong_pass_counter, self.login))
        self.connDB.commit()

        if self.wrong_pass_counter>3:
            cur.execute("UPDATE users SET ACC_ACTIVE = 0 WHERE LOGIN = ?", [self.login])
            self.connDB.commit()
        print("złe hasło lub login!")

    def login_to_app(self):
        # first compare login from db query
        # if exist -> check password
        # if correct -> check if account is not disable
        cur = self.connDB.cursor()

        db_login_query = []
        db_pass_query = []

        # check if login is OK
        for row_log in cur.execute("SELECT LOGIN FROM users"):
            db_login_query.append("".join(row_log))
        if self.login not in db_login_query:
            print(f"Nie ma takiego użytkownika lub hasło jest niepoprawne! {self.login}")
            return 1

        # check if password is OK
        for row_pass in cur.execute("SELECT PASSWORD FROM users WHERE LOGIN = ?", [self.login]):
            db_pass_query.append("".join(row_pass))
        if self.password not in db_pass_query:
            self.__incorrect_password()
            return 2

        # check if account is not blocked
        for row_isActive in cur.execute("SELECT ACC_ACTIVE FROM Users WHERE LOGIN = ?", [self.login]):
            if row_isActive[0] != 1:
                print(f"Konto: {self.login} jest zablokowane! Skontaktuj się z administratorem!")
                return 3
        print("logowanie poprawne...")
        return 0

    #usuwanie konta
    def delete_account(self):
        cur = self.connDB.cursor()
        cur.execute("DELETE FROM users WHERE LOGIN = ?",[self.login])
        self.connDB.commit()
        print("profil usunięty!")
        return 1

    #dedykacja -> Admin Panel
    #przywracanie zablokowanego konta
    def enable_account(self):
        try:
            cur = self.connDB.cursor()
            cur.execute("UPDATE users SET ACC_ACTIVE=1 WHERE LOGIN = ?", [self.login])
            self.connDB.commit()
        except ValueError:
            print("Błąd!!!")
            return 0

    def change_login(self,new_login):
        cur = self.connDB.cursor()
        cur.execute("UPDATE users SET LOGIN = ? WHERE LOGIN = ?", (new_login, self.login))
        self.connDB.commit()

    def change_password(self,new_password):
        cur = self.connDB.cursor()
        cur.execute("UPDATE users SET PASSWORD = ? WHERE LOGIN = ?", (new_password, self.login))
        self.connDB.commit()

    def get_id(self):
        cur = self.connDB.cursor()
        user_id = ""
        for user in cur.execute("SELECT USER_ID FROM users WHERE LOGIN = ?",[self.login]):
            user_id = user
        return user_id[0]

    def __del__(self):
        self.connDB.close()
